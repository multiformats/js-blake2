#!/usr/bin/env node

import { promises as fs } from 'fs'
import { fileURLToPath } from 'url'
import path from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

/**
 * @param {"s"|"b"} mode
 * @returns {Promise<void>}
 */
async function write (mode) {
  let contents = `// File generated by build.js, do not edit

import blakejs from 'blakejs'
import { from } from 'multiformats/hashes/hasher'
import { bytes } from 'multiformats'

const { blake2${mode} } = blakejs
`

  const bstart = 0xb201
  const bend = 0xb240
  const sstart = 0xb241
  const send = 0xb260

  for (let code = (mode === 'b' ? bstart : sstart); code <= (mode === 'b' ? bend : send); code++) {
    const length = code - (mode === 'b' ? bstart : sstart) + 1
    const bitLength = length * 8

    contents += `
export const blake2${mode}${bitLength} = from({
  name: 'blake2${mode}-${bitLength}',
  code: 0x${code.toString(16)},
  encode: (input) => bytes.coerce(blake2${mode}(input, undefined, ${length}))
})
`
  }

  return fs.writeFile(path.join(__dirname, `blake2${mode}.js`), contents, 'utf8')
}

Promise.all([write('b'), write('s')]).catch((err) => {
  console.error(err)
  process.exit(1)
})
